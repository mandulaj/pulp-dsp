import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.realpath(__file__), "../../..")))
from pulp_dsp_test import SweepVariable, DynamicVariable
from pulp_dsp_test import Argument, ArrayArgument, FixPointArgument, OutputArgument, ParallelArgument,CustomArgument
from pulp_dsp_test import generate_test
import math, random
# Variables:
# ---------
# Can either be SweepVariable or Dynamic Variable. The name can then be used for the arguments (as
# value or as dimension).
#
# SweepVariable:   Type of variable which can be used to sweep over values.
# DynamicVariable: Variable that is determined by previously defined variables (SweepVariables or
#                  other Dynamic Variables). Dynamic variables need a funciton, which takes an
#                  environment as argument. This environment is a dictionary which maps the names
#                  of previously defined variables (position in the variables list) to their values.
#
# Arguments:
# ---------
# Defines the arguments of the funciton. These can be one of the following:
#
# Argument(name, type, value, use_l1):
#     name: Name of the argument (as in function declaration)
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     value: Either a number, the name of a Variable or None for a random value
#     use_l1: boolean, for using l1 or l2 memory.
# FixedPointArgument(name, value, use_l1): Same as Argument, but only used for fixpoint
#                                          implementation
# ParallelArgument(name, value, use_l1): Same as Argument, but only used for parallel implementation
# ArrayArgument(name, type, length, value, use_l1)
#     name: Name of the argument (as in function declaration)
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     length: Either a number, or the name of a Variable or a tuple for randint(min, max)
#     value: Either a number, the name of a Variable or None for a random value
#     use_l1: boolean, for using l1 or l2 memory.
# OutputArgument(name, type, length, use_l1, tolerance)
#     name: Name of the argument (as in function declaration)
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     length: Either a number, or the name of a Variable or a tuple for randint(min, max)
#     use_l1: boolean, for using l1 or l2 memory.
#     tolerance: Either a constant (default 0) or a function which maps the version name to a
#                relative tolerance
# ReturnValue(ctype, use_l1, tolerance): Value which is returned by the function
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     use_l1: boolean, for using l1 or l2 memory.
#     tolerance: Either a constant (default 0) or a function which maps the version name to a
#                relative tolerance
#
# Implemented:
# -----------
# Dictionary which maps the device name ('ibex' or 'riscy') to a different dictionary. This second
# Dictionary maps the function type (i8, i16, i32, q8, q16, q32, f32) to a boolean to tell if this
# version is implemented on the given device and should be tested. Add the suffix _parallel to test
# the parallel implementation
#
# n_ops:
# -------
# Function with one parameter: env, which computes the number of operations (like macs) based on the
# sweep variables. Parameter env is a dict, mapping the name of the variable to the value for the
# specific test.

function_name = 'plp_dwt'


wavelet_lengths = {
	'PLP_DWT_HAAR': 2,
	'PLP_DWT_DB1': 2,
	'PLP_DWT_DB2': 4,
	'PLP_DWT_DB4': 8,
	'PLP_DWT_COIF17': 102,
	'PLP_DWT_SYM20': 40
}

MODES=['PLP_DWT_MODE_ZERO', 'PLP_DWT_MODE_CONSTANT','PLP_DWT_MODE_SYMMETRIC','PLP_DWT_MODE_ANTISYMMETRIC','PLP_DWT_MODE_REFLECT','PLP_DWT_MODE_ANTIREFLECT']


def makeWavelet(env, version, use_l1, arg_name):
	return """
#include "plp_const_structs.h"
#define {} {}_{}
	""".format(arg_name('wavelet'), env['wavelet'], version)

def makeMode(env, version, use_l1, arg_name):
	return """
plp_dwt_extension_mode {} = {};
	""".format(arg_name('mode'), env['mode'])

def lengthFix(env):
	if (env['mode'] == 'PLP_DWT_MODE_REFLECT' or env['mode'] == 'PLP_DWT_MODE_ANTIREFLECT') and env['length'] == 1: 
		return 2 
	else: 
		return env['length']


variables = [
	SweepVariable('length', [1, 4, 20, 201], visible=False),
	SweepVariable('mode', sorted(random.sample(MODES, k=len(MODES)))),
	SweepVariable('wavelet', sorted(random.sample(list(wavelet_lengths.keys()), k=len(wavelet_lengths.keys())))),


	DynamicVariable('len', lengthFix, visible=True),
	DynamicVariable('out_len', lambda env: math.floor((env['len'] + wavelet_lengths[env['wavelet']] - 1)/2), visible=False)
]

arguments = [
	ArrayArgument('pSrc', 'var_type', 'len', None),
	Argument('length', 'uint32_t', 'len'),
	CustomArgument('wavelet', makeWavelet, as_ptr=False),
	CustomArgument('mode', makeMode, as_ptr=False),

	OutputArgument('pDstA', 'ret_type', 'out_len', tolerance=lambda v: 1e-5 if v.startswith('f') else 0),
	OutputArgument('pDstD', 'ret_type', 'out_len', tolerance=lambda v: 1e-5 if v.startswith('f') else 0),

]

implemented = {
	'riscy': {
		'i32': False,
		'i16': False,
		'i8':  False,
		'q32': False,
		'q16': False,
		'q8':  False,
		'f32': True,
		'i32_parallel': False,
		'i16_parallel': False,
		'i8_parallel':  False,
		'q32_parallel': False,
		'q16_parallel': False,
		'q8_parallel':  False,
		'f32_parallel': False
	},
	'ibex': {
		'i32': False,
		'i16': False,
		'i8':  False,
		'q32': False,
		'q16': False,
		'q8':  False,
		'f32': False,
	}
}

n_ops = lambda env: env['len']

arg_ret_type = {
	# 'i32':   ('int32_t', 'int32_t'),
	# 'i16':   ('int16_t', 'int16_t'),
	# 'i8':    ('int8_t',  'int32_t'),
	# 'q32':   ('int32_t', 'int32_t'),
	# 'q16':   ('int16_t', 'int32_t'),
	# 'q8':    ('int8_t',  'int32_t'),
    'float': ('float',   'float')
}

TestConfig = c = generate_test(function_name, arguments, variables, implemented, use_l1=False, n_ops=n_ops, arg_ret_type=arg_ret_type)
